#!/usr/bin/env python

import json
import logging
from   ora import now
import random
import sys
import yaml

import apsis.cmdline
from   apsis.cmdline import parse_at_time, print_lines
import apsis.jobs
import apsis.lib.argparse
import apsis.lib.itr
import apsis.lib.logging
from   apsis.runs import Run
import apsis.service.client

apsis.lib.logging.configure()
log = logging.getLogger(__name__)

#-------------------------------------------------------------------------------

STYLES = {
    "summary"   : 0,
    "short"     : 1,
    "full"      : 2,
    "long"      : 3,
}

def add_dump_format_option(parser):
    parser.add_argument(
        "--format", metavar="FMT", default=None, choices={"json", "yaml"},
        help="write as FMT [json, yaml]")


def dump_format(obj, format):
    if format == "json":
        json.dump(obj, sys.stdout, indent=2)
    elif format == "yaml":
        yaml.dump(obj, sys.stdout)


#-------------------------------------------------------------------------------
# top-level argument parser

parser = apsis.lib.argparse.CommandArgumentParser()
addr = apsis.service.client.get_address()
parser.add_argument(
    "--host", metavar="HOST", default=addr.host,
    help=f"connect to HOST [def: {addr.host}]")
parser.add_argument(
    "--port", metavar="PORT", default=addr.port,
    help=f"connect to PORT [def: {addr.port}]")

#--- command: adhoc ------------------------------------------------------------

def cmd_adhoc(client, args):
    time = parse_at_time(args.time)
    if args.shell:
        command = " ".join(args.command)
        run = client.schedule_shell_program(time, command)
    else:
        run = client.schedule_program(time, args.command)
    print_lines(apsis.cmdline.format_run(run))


cmd = parser.add_command(
    "adhoc", cmd_adhoc,
    description="Creates and schedules an ad hoc run.")
cmd.add_argument(
    "time", metavar="TIME",
    help="time to run [time, daytime, 'now']")
cmd.add_argument(
    "command", metavar="CMD...", nargs="+",
    help="command to run")
cmd.add_argument(
    "--shell", action="store_true", default=False,
    help="treat CMD as shell code (contactenated)")

#--- command: history ----------------------------------------------------------

def cmd_history(client, args):
    run_history = client.get_history(args.run_id)
    if args.format is None:
        print_lines(apsis.cmdline.format_run_history(run_history))
    else:
        dump_format(run_history, args.format)


cmd = parser.add_command(
    "history", cmd_history,
    description="Shows history for a run.")
cmd.add_argument(
    "run_id", metavar="RUN-ID")
add_dump_format_option(cmd)
        
#--- command: job --------------------------------------------------------------

def cmd_job(client, args):
    job_id = args.job  # FIXME
    job = client.get_job(job_id)
    if args.format is None:
        print_lines(apsis.cmdline.format_job(job))
    else:
        dump_format(job, args.format)


cmd = parser.add_command(
    "job", cmd_job,
    description="Displays a job.")
cmd.add_argument(
    "job", metavar="JOB-ID",
    help="display job with JOB-ID")
add_dump_format_option(cmd)

#--- command: jobs -------------------------------------------------------------

def cmd_jobs(client, args):
    jobs = client.get_jobs()
    if args.format is None:
        print_lines(apsis.cmdline.format_jobs(jobs))
        print()
    else:
        dump_format(jobs, args.format)


cmd = parser.add_command(
    "jobs", cmd_jobs,
    description="Lists all jobs.")
add_dump_format_option(cmd)

#--- command: output -----------------------------------------------------------

def cmd_output(client, args):
    # FIXME: For now, expose output_id=output only.
    output = client.get_output(args.run_id, "output")
    sys.stdout.buffer.write(output)


cmd = parser.add_command(
    "output", cmd_output,
    description="Dumps the output of a run.")
cmd.add_argument(
    "run_id", metavar="RUN-ID")

#--- command: rerun ------------------------------------------------------------

def cmd_rerun(client, arg):
    run = client.rerun(arg.run_id)
    if args.format is None:
        print_lines(apsis.cmdline.format_run(run))
    else:
        dump_format(run, args.format)


cmd = parser.add_command(
    "rerun", cmd_rerun,
    description="Reruns a failed (or error) run.")
cmd.add_argument(
    "run_id", metavar="RUN-ID")
add_dump_format_option(cmd)

#--- command: run --------------------------------------------------------------

def cmd_run(client, args):
    for run_id in args.run_id:
        run = client.get_run(run_id)
        if args.format is None:
            print_lines(apsis.cmdline.format_run(run, style=STYLES[args.style]))
        else:
            dump_format(run, args.format)


cmd = parser.add_command(
    "run", cmd_run,
    description="Displays a run.")
cmd.add_argument(
    "run_id", metavar="RUN-ID", nargs="+")
cmd.add_argument(
    "--style", "-S", metavar="STYLE", 
    choices=STYLES, default="short",
    help="format each run with STYLE")
add_dump_format_option(cmd)

#--- command: runs -------------------------------------------------------------

def cmd_runs(client, arg):
    runs = client.get_runs(
        job_id  =args.job,
        reruns  =args.reruns,
        state   =args.state,
        # FIXME: times
    )

    if args.summary:
        for run in runs.values():
            print_lines(apsis.cmdline.format_run(run))
    elif args.format is None:
        print_lines(apsis.cmdline.format_runs(runs, reruns=args.reruns))
    else:
        dump_format(runs, args.format)


cmd = parser.add_command(
    "runs", cmd_runs,
    description="Queries and displays runs.")
cmd.add_argument(
    "--job", "-j", metavar="JOB-ID", default=None,
    help="show only runs of job JOB-ID")
cmd.add_argument(
    "--reruns", action="store_true", default=False,
    help="show RUN-ID and its reruns")
cmd.add_argument(
    "--state", "-s", metavar="STATE", default=None,
    choices=[ r.name for r in Run.STATE ],
    help="show only runs in STATE")
cmd.add_argument(
    "--times", "-t", metavar="TIMESPAN", default=None,
    help="show only runs in TIMESPAN")

grp = cmd.add_mutually_exclusive_group()
grp.add_argument(
    "--summary", action="store_true", default=False,
    help="summarize each run")
add_dump_format_option(grp)

#--- command: schedule ---------------------------------------------------------

def cmd_schedule(client, args):
    run = client.schedule(args.job_id, dict(args.args), args.time)
    print_lines(apsis.cmdline.format_run(run))


def parse_arg(arg):
    name, value = arg.split("=", 1)
    return name, value


cmd = parser.add_command(
    "schedule", cmd_schedule,
    description="Creates and schedules a run.")
cmd.add_argument(
    "time", metavar="TIME", type=parse_at_time,
    help="time to run [time, daytime, 'now']")
cmd.add_argument(
    "job_id", metavar="JOB-ID",
    help="run an instance of JOB-ID")
cmd.add_argument(
    "args", metavar="NAME=VAL", type=parse_arg, nargs="*",
    help="run JOB-ID with NAME=VAL")

#--- command: signal -----------------------------------------------------------

def cmd_signal(client, args):
    client.signal(args.run_id, args.signum)


cmd = parser.add_command(
    "signal", cmd_signal,
    description="Sends a signal to a running run.")
cmd.add_argument(
    "run_id", metavar="RUN-ID")
cmd.add_argument(
    "signum", metavar="SIGNAL", default="SIGTERM",
    help="signal name or number")

#--- test commands -------------------------------------------------------------

def cmd_test0(client, args):
    time = now()
    past = args.past
    rng = args.fut - past

    for i in range(args.num):
        run = client.schedule("reruntest", {"id": i}, time + past + rng * random.random())
        log.info(f"scheduled: {run['run_id']}")

cmd = parser.add_command(
    "test0", cmd_test0, 
    description="[TEST] Schedule reruntest.")
cmd.add_argument("num", metavar="NUM", type=int, nargs="?", default=1)
cmd.add_argument("fut", metavar="SECS", type=float, nargs="?", default=60)
cmd.add_argument("past", metavar="SECS", type=float, nargs="?", default=0)

#-------------------------------------------------------------------------------

args = parser.parse_args()
client = apsis.service.client.Client((args.host, args.port))

try:
    args.cmd(client, args)
except apsis.service.client.APIError as err:
    print_lines(apsis.cmdline.format_api_error(err), file=sys.stderr)
    raise SystemExit(1)
except (KeyboardInterrupt, BrokenPipeError):
    pass

